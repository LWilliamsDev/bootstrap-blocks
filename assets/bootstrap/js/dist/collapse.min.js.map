{"version":3,"sources":["../src/util/index.js","../src/collapse.js"],"names":["getSelector","element","selector","getAttribute","hrefAttr","includes","startsWith","split","trim","getSelectorFromElement","document","querySelector","getElementFromSelector","isElement","obj","jquery","nodeType","DOMContentLoadedCallbacks","NAME","Default","toggle","parent","DefaultType","CLASS_NAME_SHOW","CLASS_NAME_COLLAPSE","CLASS_NAME_COLLAPSING","CLASS_NAME_COLLAPSED","CLASS_NAME_DEEPER_CHILDREN","SELECTOR_DATA_TOGGLE","Collapse","BaseComponent","constructor","config","super","this","_isTransitioning","_config","_getConfig","_triggerArray","toggleList","SelectorEngine","find","i","len","length","elem","filterElement","filter","foundElem","_element","_selector","push","_initializeChildren","_addAriaAndCollapsedClass","_isShown","hide","show","activesData","actives","children","container","findOne","tempActiveData","getInstance","EventHandler","trigger","defaultPrevented","forEach","elemActive","getOrCreateInstance","Data","set","dimension","_getDimension","classList","remove","add","style","scrollSize","toUpperCase","slice","_queueCallback","getBoundingClientRect","offsetHeight","triggerArrayLength","contains","Manipulator","getDataAttributes","Boolean","componentName","configTypes","Object","keys","property","expectedTypes","value","valueType","toString","call","match","toLowerCase","RegExp","test","TypeError","typeCheckConfig","selected","triggerArray","isOpen","setAttribute","static","each","data","plugin","callback","on","event","target","tagName","delegateTarget","preventDefault","$","jQuery","window","body","hasAttribute","getjQuery","name","JQUERY_NO_CONFLICT","fn","jQueryInterface","Constructor","noConflict","readyState","addEventListener"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst MAX_UID = 1000000\nconst MILLISECONDS_MULTIPLIER = 1000\nconst TRANSITION_END = 'transitionend'\n\n// Shoutout AngusCroll (https://goo.gl/pxwQGp)\nconst toType = obj => {\n  if (obj === null || obj === undefined) {\n    return `${obj}`\n  }\n\n  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n}\n\n/**\n * --------------------------------------------------------------------------\n * Public Util Api\n * --------------------------------------------------------------------------\n */\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID)\n  } while (document.getElementById(prefix))\n\n  return prefix\n}\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target')\n\n  if (!selector || selector === '#') {\n    let hrefAttr = element.getAttribute('href')\n\n    // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n    if (!hrefAttr || (!hrefAttr.includes('#') && !hrefAttr.startsWith('.'))) {\n      return null\n    }\n\n    // Just in case some CMS puts out a full URL with the anchor appended\n    if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n      hrefAttr = `#${hrefAttr.split('#')[1]}`\n    }\n\n    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null\n  }\n\n  return selector\n}\n\nconst getSelectorFromElement = element => {\n  const selector = getSelector(element)\n\n  if (selector) {\n    return document.querySelector(selector) ? selector : null\n  }\n\n  return null\n}\n\nconst getElementFromSelector = element => {\n  const selector = getSelector(element)\n\n  return selector ? document.querySelector(selector) : null\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n}\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END))\n}\n\nconst isElement = obj => {\n  if (!obj || typeof obj !== 'object') {\n    return false\n  }\n\n  if (typeof obj.jquery !== 'undefined') {\n    obj = obj[0]\n  }\n\n  return typeof obj.nodeType !== 'undefined'\n}\n\nconst getElement = obj => {\n  if (isElement(obj)) { // it's a jQuery object or a node element\n    return obj.jquery ? obj[0] : obj\n  }\n\n  if (typeof obj === 'string' && obj.length > 0) {\n    return document.querySelector(obj)\n  }\n\n  return null\n}\n\nconst typeCheckConfig = (componentName, config, configTypes) => {\n  Object.keys(configTypes).forEach(property => {\n    const expectedTypes = configTypes[property]\n    const value = config[property]\n    const valueType = value && isElement(value) ? 'element' : toType(value)\n\n    if (!new RegExp(expectedTypes).test(valueType)) {\n      throw new TypeError(\n        `${componentName.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n      )\n    }\n  })\n}\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false\n  }\n\n  return getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n}\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode()\n    return root instanceof ShadowRoot ? root : null\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element\n  }\n\n  // when we don't find a shadow root\n  if (!element.parentNode) {\n    return null\n  }\n\n  return findShadowRoot(element.parentNode)\n}\n\nconst noop = () => {}\n\n/**\n * Trick to restart an element's animation\n *\n * @param {HTMLElement} element\n * @return void\n *\n * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n */\nconst reflow = element => {\n  // eslint-disable-next-line no-unused-expressions\n  element.offsetHeight\n}\n\nconst getjQuery = () => {\n  const { jQuery } = window\n\n  if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return jQuery\n  }\n\n  return null\n}\n\nconst DOMContentLoadedCallbacks = []\n\nconst onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        DOMContentLoadedCallbacks.forEach(callback => callback())\n      })\n    }\n\n    DOMContentLoadedCallbacks.push(callback)\n  } else {\n    callback()\n  }\n}\n\nconst isRTL = () => document.documentElement.dir === 'rtl'\n\nconst defineJQueryPlugin = plugin => {\n  onDOMContentLoaded(() => {\n    const $ = getjQuery()\n    /* istanbul ignore if */\n    if ($) {\n      const name = plugin.NAME\n      const JQUERY_NO_CONFLICT = $.fn[name]\n      $.fn[name] = plugin.jQueryInterface\n      $.fn[name].Constructor = plugin\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT\n        return plugin.jQueryInterface\n      }\n    }\n  })\n}\n\nconst execute = callback => {\n  if (typeof callback === 'function') {\n    callback()\n  }\n}\n\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    execute(callback)\n    return\n  }\n\n  const durationPadding = 5\n  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding\n\n  let called = false\n\n  const handler = ({ target }) => {\n    if (target !== transitionElement) {\n      return\n    }\n\n    called = true\n    transitionElement.removeEventListener(TRANSITION_END, handler)\n    execute(callback)\n  }\n\n  transitionElement.addEventListener(TRANSITION_END, handler)\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(transitionElement)\n    }\n  }, emulatedDuration)\n}\n\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\nconst getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  let index = list.indexOf(activeElement)\n\n  // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n  if (index === -1) {\n    return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0]\n  }\n\n  const listLength = list.length\n\n  index += shouldGetNext ? 1 : -1\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))]\n}\n\nexport {\n  getElement,\n  getUID,\n  getSelectorFromElement,\n  getElementFromSelector,\n  getTransitionDurationFromElement,\n  triggerTransitionEnd,\n  isElement,\n  typeCheckConfig,\n  isVisible,\n  isDisabled,\n  findShadowRoot,\n  noop,\n  getNextActiveElement,\n  reflow,\n  getjQuery,\n  onDOMContentLoaded,\n  isRTL,\n  defineJQueryPlugin,\n  execute,\n  executeAfterTransition\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport {\n  defineJQueryPlugin,\n  getElement,\n  getSelectorFromElement,\n  getElementFromSelector,\n  reflow,\n  typeCheckConfig\n} from './util/index'\nimport Data from './dom/data'\nimport EventHandler from './dom/event-handler'\nimport Manipulator from './dom/manipulator'\nimport SelectorEngine from './dom/selector-engine'\nimport BaseComponent from './base-component'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'collapse'\nconst DATA_KEY = 'bs.collapse'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst Default = {\n  toggle: true,\n  parent: null\n}\n\nconst DefaultType = {\n  toggle: 'boolean',\n  parent: '(null|element)'\n}\n\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_COLLAPSE = 'collapse'\nconst CLASS_NAME_COLLAPSING = 'collapsing'\nconst CLASS_NAME_COLLAPSED = 'collapsed'\nconst CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`\nconst CLASS_NAME_HORIZONTAL = 'collapse-horizontal'\n\nconst WIDTH = 'width'\nconst HEIGHT = 'height'\n\nconst SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"collapse\"]'\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Collapse extends BaseComponent {\n  constructor(element, config) {\n    super(element)\n\n    this._isTransitioning = false\n    this._config = this._getConfig(config)\n    this._triggerArray = []\n\n    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE)\n\n    for (let i = 0, len = toggleList.length; i < len; i++) {\n      const elem = toggleList[i]\n      const selector = getSelectorFromElement(elem)\n      const filterElement = SelectorEngine.find(selector)\n        .filter(foundElem => foundElem === this._element)\n\n      if (selector !== null && filterElement.length) {\n        this._selector = selector\n        this._triggerArray.push(elem)\n      }\n    }\n\n    this._initializeChildren()\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown())\n    }\n\n    if (this._config.toggle) {\n      this.toggle()\n    }\n  }\n\n  // Getters\n\n  static get Default() {\n    return Default\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n\n  toggle() {\n    if (this._isShown()) {\n      this.hide()\n    } else {\n      this.show()\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || this._isShown()) {\n      return\n    }\n\n    let actives = []\n    let activesData\n\n    if (this._config.parent) {\n      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent)\n      actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)) // remove children if greater depth\n    }\n\n    const container = SelectorEngine.findOne(this._selector)\n    if (actives.length) {\n      const tempActiveData = actives.find(elem => container !== elem)\n      activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null\n\n      if (activesData && activesData._isTransitioning) {\n        return\n      }\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    actives.forEach(elemActive => {\n      if (container !== elemActive) {\n        Collapse.getOrCreateInstance(elemActive, { toggle: false }).hide()\n      }\n\n      if (!activesData) {\n        Data.set(elemActive, DATA_KEY, null)\n      }\n    })\n\n    const dimension = this._getDimension()\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE)\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n\n    this._element.style[dimension] = 0\n\n    this._addAriaAndCollapsedClass(this._triggerArray, true)\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n      this._element.style[dimension] = ''\n\n      EventHandler.trigger(this._element, EVENT_SHOWN)\n    }\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1)\n    const scrollSize = `scroll${capitalizedDimension}`\n\n    this._queueCallback(complete, this._element, true)\n    this._element.style[dimension] = `${this._element[scrollSize]}px`\n  }\n\n  hide() {\n    if (this._isTransitioning || !this._isShown()) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`\n\n    reflow(this._element)\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n    const triggerArrayLength = this._triggerArray.length\n    for (let i = 0; i < triggerArrayLength; i++) {\n      const trigger = this._triggerArray[i]\n      const elem = getElementFromSelector(trigger)\n\n      if (elem && !this._isShown(elem)) {\n        this._addAriaAndCollapsedClass([trigger], false)\n      }\n    }\n\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE)\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._element.style[dimension] = ''\n\n    this._queueCallback(complete, this._element, true)\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  // Private\n\n  _getConfig(config) {\n    config = {\n      ...Default,\n      ...Manipulator.getDataAttributes(this._element),\n      ...config\n    }\n    config.toggle = Boolean(config.toggle) // Coerce string values\n    config.parent = getElement(config.parent)\n    typeCheckConfig(NAME, config, DefaultType)\n    return config\n  }\n\n  _getDimension() {\n    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT\n  }\n\n  _initializeChildren() {\n    if (!this._config.parent) {\n      return\n    }\n\n    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent)\n    SelectorEngine.find(SELECTOR_DATA_TOGGLE, this._config.parent).filter(elem => !children.includes(elem))\n      .forEach(element => {\n        const selected = getElementFromSelector(element)\n\n        if (selected) {\n          this._addAriaAndCollapsedClass([element], this._isShown(selected))\n        }\n      })\n  }\n\n  _addAriaAndCollapsedClass(triggerArray, isOpen) {\n    if (!triggerArray.length) {\n      return\n    }\n\n    triggerArray.forEach(elem => {\n      if (isOpen) {\n        elem.classList.remove(CLASS_NAME_COLLAPSED)\n      } else {\n        elem.classList.add(CLASS_NAME_COLLAPSED)\n      }\n\n      elem.setAttribute('aria-expanded', isOpen)\n    })\n  }\n\n  // Static\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const _config = {}\n      if (typeof config === 'string' && /show|hide/.test(config)) {\n        _config.toggle = false\n      }\n\n      const data = Collapse.getOrCreateInstance(this, _config)\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.target.tagName === 'A' || (event.delegateTarget && event.delegateTarget.tagName === 'A')) {\n    event.preventDefault()\n  }\n\n  const selector = getSelectorFromElement(this)\n  const selectorElements = SelectorEngine.find(selector)\n\n  selectorElements.forEach(element => {\n    Collapse.getOrCreateInstance(element, { toggle: false }).toggle()\n  })\n})\n\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Collapse to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Collapse)\n\nexport default Collapse\n"]}